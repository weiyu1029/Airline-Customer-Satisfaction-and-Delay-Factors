# -*- coding: utf-8 -*-
"""University of Chicago.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TntN5rXU2IKOmissrGUQaPAxPjv6FRC4
"""

# Personal GitHub: https://github.com/yourusername (replace with actual URL)
# Analysis of Airline Customer Satisfaction and Delay Factors

# 1. Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import pearsonr

# 2. Ingest data from csv
# Assumes a CSV file 'airline_data.csv' with columns: 'FlightID', 'DepartureDelay', 'ArrivalDelay',
# 'CustomerSatisfaction', 'FlightDuration', 'Airline', 'Destination', 'FlightDate'
data = pd.read_csv("airline_data.csv")

# 3. Manage different data types
# Convert 'FlightDate' to datetime, 'Airline' and 'Destination' to categorical
data['FlightDate'] = pd.to_datetime(data['FlightDate'])
data['Airline'] = data['Airline'].astype('category')
data['Destination'] = data['Destination'].astype('category')

# 4. Use your function for data analysis
# Custom function to calculate correlation between delay and customer satisfaction
def analyze_delay_satisfaction(data):
    delays = data['DepartureDelay'] + data['ArrivalDelay']
    satisfaction = data['CustomerSatisfaction']
    correlation, p_value = pearsonr(delays, satisfaction)
    print(f"Correlation between delays and satisfaction: {correlation:.2f}, p-value: {p_value:.2e}")
    return correlation

# Execute the function and output the correlation
correlation = analyze_delay_satisfaction(data)

# 5. Visualize data
# Plot delays by airline and satisfaction level
plt.figure(figsize=(10, 6))
sns.boxplot(x="Airline", y="DepartureDelay", data=data, hue="CustomerSatisfaction", palette="coolwarm")
plt.title("Departure Delays by Airline and Customer Satisfaction")
plt.xlabel("Airline")
plt.ylabel("Departure Delay (Minutes)")
plt.xticks(rotation=45)
plt.legend(title="Customer Satisfaction")
plt.tight_layout()
plt.show()

# 6. Wrangle data
# Remove rows with extreme delays to focus on typical delays
data_cleaned = data[(data['DepartureDelay'] < 300) & (data['ArrivalDelay'] < 300)]

# Create a new column to classify flights by duration
def classify_duration(minutes):
    if minutes < 60:
        return 'Short'
    elif 60 <= minutes <= 180:
        return 'Medium'
    else:
        return 'Long'

data_cleaned['FlightDurationCategory'] = data_cleaned['FlightDuration'].apply(classify_duration)

# 7. Write your own function
# Function to compute average delay by airline and flight duration category
def avg_delay_by_airline_duration(data):
    avg_delay = data.groupby(['Airline', 'FlightDurationCategory'])[['DepartureDelay', 'ArrivalDelay']].mean()
    print("Average delay by airline and flight duration category:\n", avg_delay)
    return avg_delay

# Call the function and display the output
avg_delay_by_airline_duration(data_cleaned)